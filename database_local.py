# database_local.py - EXCLUSIVO para base de datos LOCAL
import mysql.connector
from mysql.connector import Error
from PyQt5.QtWidgets import QMessageBox, QApplication, QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton, QHBoxLayout
from PyQt5.QtCore import Qt
import sys
import json
import os

# ‚úÖ VARIABLE GLOBAL TEMPORAL solo para primera instalaci√≥n
CREDENCIALES_LOCALES_TEMPORALES = None
CONFIG_FILE = "mysql_config.json"

class DialogoCredencialesMySQL(QDialog):
    """Di√°logo para ingresar credenciales de MySQL local - CONEXI√ìN LOCAL"""
    def __init__(self, parent=None, titulo_personalizado=None, es_reconfiguracion=False):
        super().__init__(parent)
        
        if titulo_personalizado:
            self.setWindowTitle(titulo_personalizado)
        else:
            if es_reconfiguracion:
                self.setWindowTitle("üîß Reconfigurar MySQL Local")
            else:
                self.setWindowTitle("üîß Configuraci√≥n MySQL Local - Primera Instalaci√≥n")
            
        self.setFixedSize(450, 420)  # ‚úÖ Aumentado para base_url
        self.setWindowModality(Qt.ApplicationModal)
        
        layout = QVBoxLayout()
        
        # T√≠tulo m√°s descriptivo para CONEXI√ìN LOCAL
        if es_reconfiguracion:
            titulo = QLabel("‚öôÔ∏è RECONFIGURAR CONEXI√ìN LOCAL")
            descripcion_texto = (
                "üìã Se detect√≥ que la configuraci√≥n local actual no funciona.\n"
                "Por favor, ingrese las nuevas credenciales de MySQL LOCAL.\n\n"
                "üîê Ingrese los datos de conexi√≥n corregidos:"
            )
        else:
            titulo = QLabel("‚öôÔ∏è CONFIGURACI√ìN INICIAL - MySQL Local")
            descripcion_texto = (
                "üìã Primera instalaci√≥n: Se necesitan credenciales de MySQL LOCAL\n"
                "para crear la base de datos 'databaseapp'.\n\n"
                "üîê Ingrese los datos de conexi√≥n de su servidor MySQL LOCAL:"
            )
        
        titulo.setStyleSheet("font-weight: bold; font-size: 13px; color: #2c3e50; background-color: #ecf0f1; padding: 6px; border-radius: 3px;")
        layout.addWidget(titulo)
        
        descripcion = QLabel(descripcion_texto)
        descripcion.setWordWrap(True)
        descripcion.setStyleSheet("color: #7f8c8d; margin-bottom: 10px; padding: 3px; font-size: 11px;")
        layout.addWidget(descripcion)
        
        # Campos con padding reducido
        layout.addWidget(QLabel("üåê Host del servidor:"))
        self.host_input = QLineEdit()
        self.host_input.setText("localhost")
        self.host_input.setPlaceholderText("localhost, 127.0.0.1")
        self.host_input.setStyleSheet("padding: 4px; font-size: 11px; border: 1px solid #bdc3c7; border-radius: 2px;")
        layout.addWidget(self.host_input)
        
        layout.addWidget(QLabel("üë§ Usuario:"))
        self.usuario_input = QLineEdit()
        self.usuario_input.setText("root")
        self.usuario_input.setPlaceholderText("Usuario MySQL")
        self.usuario_input.setStyleSheet("padding: 4px; font-size: 11px; border: 1px solid #bdc3c7; border-radius: 2px;")
        layout.addWidget(self.usuario_input)
        
        layout.addWidget(QLabel("üîë Contrase√±a:"))
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("Contrase√±a MySQL (puede estar vac√≠a)")
        self.password_input.setStyleSheet("padding: 4px; font-size: 11px; border: 1px solid #bdc3c7; border-radius: 2px;")
        layout.addWidget(self.password_input)
        
        layout.addWidget(QLabel("üîå Puerto:"))
        self.puerto_input = QLineEdit()
        self.puerto_input.setText("3306")
        self.puerto_input.setPlaceholderText("3306")
        self.puerto_input.setStyleSheet("padding: 4px; font-size: 11px; border: 1px solid #bdc3c7; border-radius: 2px;")
        layout.addWidget(self.puerto_input)
        
        # ‚úÖ NUEVO CAMPO: Base URL
        layout.addWidget(QLabel("üåê Base URL (API):"))
        self.base_url_input = QLineEdit()
        self.base_url_input.setText("http://localhost:5000")
        self.base_url_input.setPlaceholderText("http://localhost:5000 o https://tudominio.com")
        self.base_url_input.setStyleSheet("padding: 4px; font-size: 11px; border: 1px solid #bdc3c7; border-radius: 2px;")
        layout.addWidget(self.base_url_input)
        
        # Espaciador
        layout.addSpacing(10)
        
        # Botones con padding reducido
        botones_layout = QHBoxLayout()
        
        self.btn_probar = QPushButton("üîç Probar Conexi√≥n")
        self.btn_probar.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 6px 10px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        self.btn_probar.clicked.connect(self.probar_conexion)
        botones_layout.addWidget(self.btn_probar)
        
        self.btn_aceptar = QPushButton("üíæ Aceptar")
        self.btn_aceptar.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                padding: 6px 12px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #219a52;
            }
        """)
        self.btn_aceptar.clicked.connect(self.aceptar)
        botones_layout.addWidget(self.btn_aceptar)
        
        self.btn_cancelar = QPushButton("‚ùå Cancelar")
        self.btn_cancelar.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                padding: 6px 12px;
                border: none;
                border-radius: 3px;
                font-weight: bold;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        self.btn_cancelar.clicked.connect(self.reject)
        botones_layout.addWidget(self.btn_cancelar)
        
        layout.addLayout(botones_layout)
        
        # Informaci√≥n adicional
        info = QLabel(
            "üí° Las credenciales se guardar√°n en la tabla 'datos_host_local'\n"
            "para uso futuro. Base URL es para la API del frontend."
        )
        info.setWordWrap(True)
        info.setStyleSheet("color: #95a5a6; font-size: 10px; margin-top: 8px; padding: 6px; background-color: #f8f9fa; border-radius: 3px;")
        layout.addWidget(info)
        
        self.setLayout(layout)
        
        self.credenciales = None
        self.es_reconfiguracion = es_reconfiguracion
    
    def probar_conexion(self):
        """Probar la conexi√≥n LOCAL con las credenciales ingresadas"""
        host = self.host_input.text().strip()
        usuario = self.usuario_input.text().strip()
        password = self.password_input.text()
        puerto = self.puerto_input.text().strip()
        
        if not host:
            QMessageBox.warning(self, "Campo requerido", "El campo 'Host' es obligatorio.")
            return False
            
        if not usuario:
            QMessageBox.warning(self, "Campo requerido", "El campo 'Usuario' es obligatorio.")
            return False
            
        if not puerto.isdigit():
            QMessageBox.warning(self, "Error", "El puerto debe ser un n√∫mero v√°lido.")
            return False
        
        try:
            # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
            parametros_conexion = {
                'host': host,
                'user': usuario,
                'password': password,
                'port': int(puerto),
                'connect_timeout': 8
            }
            conexion = mysql.connector.connect(**parametros_conexion)
            
            if conexion.is_connected():
                info_servidor = conexion.get_server_info()
                conexion.close()
                
                if self.es_reconfiguracion:
                    mensaje = f"‚úÖ Conexi√≥n LOCAL restaurada correctamente!\n\nServidor: {info_servidor}\nHost: {host}\nUsuario: {usuario}"
                else:
                    mensaje = f"‚úÖ Conexi√≥n LOCAL exitosa!\n\nServidor: {info_servidor}\nHost: {host}\nUsuario: {usuario}"
                
                QMessageBox.information(self, "Conexi√≥n Exitosa", mensaje)
                return True
                
        except Error as e:
            QMessageBox.critical(self, "Error de Conexi√≥n", 
                               f"No se pudo conectar a MySQL LOCAL:\n\nError: {str(e)}\n\nVerifique las credenciales e intente nuevamente.")
            return False
    
    def aceptar(self):
        """Aceptar las credenciales LOCALES si la conexi√≥n es exitosa"""
        if self.probar_conexion():
            self.credenciales = {
                'host': self.host_input.text().strip(),
                'user': self.usuario_input.text().strip(),
                'password': self.password_input.text(),
                'port': int(self.puerto_input.text().strip()),
                'base_url': self.base_url_input.text().strip()  # ‚úÖ NUEVO CAMPO
            }
            self.accept()

def obtener_credenciales_mysql(parent=None, es_reconfiguracion=False):
    """Obtener credenciales de MySQL LOCAL mediante di√°logo"""
    try:
        app = QApplication.instance()
        if not app:
            app = QApplication([])
        
        if es_reconfiguracion:
            titulo = "üîß Reconfigurar MySQL Local"
        else:
            titulo = "üîß Configuraci√≥n MySQL Local - Primera Instalaci√≥n"
        
        dialogo = DialogoCredencialesMySQL(parent, titulo, es_reconfiguracion)
        if dialogo.exec_() == QDialog.Accepted:
            return dialogo.credenciales
        else:
            if es_reconfiguracion:
                QMessageBox.warning(parent, "Reconfiguraci√≥n Cancelada", "La aplicaci√≥n no puede continuar sin una conexi√≥n LOCAL v√°lida.")
            else:
                QMessageBox.warning(parent, "Instalaci√≥n Cancelada", "La aplicaci√≥n no puede continuar sin acceso a MySQL LOCAL.")
            return None
    except Exception as e:
        print(f"Error al mostrar di√°logo de credenciales LOCALES: {e}")
        return None

def guardar_configuracion_externa(credenciales):
    """Guardar configuraci√≥n en archivo externo para recuperaci√≥n r√°pida"""
    try:
        config = {
            'host': credenciales['host'],
            'user': credenciales['user'],
            'password': credenciales['password'],
            'port': credenciales['port'],
            'database': 'databaseapp',
            'base_url': credenciales.get('base_url', 'http://localhost:5000')  # ‚úÖ NUEVO
        }
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        print(f"[SUCCESS] üíæ Configuraci√≥n guardada en {CONFIG_FILE}")
        return True
    except Exception as e:
        print(f"[ERROR] ‚ùå No se pudo guardar configuraci√≥n externa: {e}")
        return False

def cargar_configuracion_externa():
    """Cargar configuraci√≥n desde archivo externo"""
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
            print(f"[SUCCESS] üìÇ Configuraci√≥n cargada desde {CONFIG_FILE}")
            return config
        return None
    except Exception as e:
        print(f"[ERROR] ‚ùå No se pudo cargar configuraci√≥n externa: {e}")
        return None

def crear_tabla_licencia(conexion):
    """Crear tabla de licencia en DB local"""
    cursor = conexion.cursor()
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS licencia (
                id INT AUTO_INCREMENT PRIMARY KEY,
                serial VARCHAR(100) NOT NULL,
                clave VARCHAR(255) NOT NULL,
                fecha_activacion DATE NOT NULL,
                fecha_expiracion TEXT NOT NULL,
                hardware_id VARCHAR(255)
            ) ENGINE=InnoDB;
        """)
        print("[OK] Tabla 'licencia' creada/verificada")
    except Exception as e:
        print(f"Error al crear tabla 'licencia': {e}")
    finally:
        cursor.close()

def crear_tabla_datos_host_local(conexion):
    """Crear tabla para configuraci√≥n de conexi√≥n LOCAL"""
    cursor = conexion.cursor()
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS datos_host_local (
                id INT AUTO_INCREMENT PRIMARY KEY,
                host VARCHAR(255) NOT NULL,
                usuario VARCHAR(255) NOT NULL,
                password VARCHAR(255) NOT NULL,
                base_datos VARCHAR(255) NOT NULL,
                puerto INT NOT NULL DEFAULT 3306,
                base_url VARCHAR(255) NULL,
                activo BOOLEAN NOT NULL DEFAULT TRUE,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB;
        """)
        
        conexion.commit()
        print("[OK] Tabla 'datos_host_local' creada/verificada")
        
    except Exception as e:
        print(f"Error al crear tabla 'datos_host_local': {e}")
    finally:
        cursor.close()

def crear_tabla_datos_hosting(conexion):
    """Crear tabla para configuraci√≥n de conexi√≥n al SERVIDOR REMOTO"""
    cursor = conexion.cursor()
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS datos_hosting (
                id INT AUTO_INCREMENT PRIMARY KEY,
                host VARCHAR(255) NOT NULL,
                usuario VARCHAR(255) NOT NULL,
                password VARCHAR(255) NOT NULL,
                base_datos VARCHAR(255) NOT NULL,
                puerto INT NOT NULL DEFAULT 3306,
                base_url VARCHAR(255) NULL,
                activo BOOLEAN NOT NULL DEFAULT TRUE,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB;
        """)
        
        conexion.commit()
        print("[OK] Tabla 'datos_hosting' creada/verificada")
        
    except Exception as e:
        print(f"Error al crear tabla 'datos_hosting': {e}")
    finally:
        cursor.close()

def conectar_y_guardar_configuracion(credenciales, parent=None):
    """
    Conectar con credenciales y guardarlas en tabla Y archivo externo
    """
    global CREDENCIALES_LOCALES_TEMPORALES
    
    print(f"[DEBUG] üõ†Ô∏è Conectando y guardando: {credenciales['user']}@{credenciales['host']}")
    
    try:
        # ‚úÖ GUARDAR como temporales inmediatamente
        CREDENCIALES_LOCALES_TEMPORALES = credenciales.copy()
        
        # Primero conectar sin base de datos para crearla
        print("[DEBUG] Conectando sin base de datos...")
        # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
        parametros_conexion = {k: v for k, v in credenciales.items() 
                             if k in ['host', 'user', 'password', 'port']}
        conexion = mysql.connector.connect(**parametros_conexion, connect_timeout=5)
        
        cursor = conexion.cursor()
        print("[DEBUG] Creando base de datos si no existe...")
        cursor.execute("CREATE DATABASE IF NOT EXISTS databaseapp")
        
        # Ahora conectar a la base de datos espec√≠fica
        print("[DEBUG] Conectando a databaseapp...")
        parametros_con_db = parametros_conexion.copy()
        parametros_con_db['database'] = "databaseapp"
        conexion_db = mysql.connector.connect(**parametros_con_db, connect_timeout=5)
        
        # Crear tablas si no existen
        print("[DEBUG] Creando/verificando tablas...")
        crear_tabla_licencia(conexion_db)
        crear_tabla_datos_host_local(conexion_db)
        crear_tabla_datos_hosting(conexion_db)
        
        # ‚úÖ GUARDAR en tabla datos_host_local
        print("[DEBUG] Guardando en tabla datos_host_local...")
        cursor_db = conexion_db.cursor()
        
        # Limpiar configuraciones anteriores
        cursor_db.execute("UPDATE datos_host_local SET activo = 0")
        
        # Insertar nueva configuraci√≥n
        cursor_db.execute("""
            INSERT INTO datos_host_local (host, usuario, password, base_datos, puerto, base_url, activo)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (
            credenciales['host'],
            credenciales['user'],
            credenciales['password'],
            "databaseapp",
            credenciales['port'],
            credenciales.get('base_url', 'http://localhost:5000'),  # ‚úÖ NUEVO
            True
        ))
        
        conexion_db.commit()
        
        # ‚úÖ GUARDAR en archivo externo
        print("[DEBUG] Guardando en archivo externo...")
        guardar_configuracion_externa(credenciales)
        
        # VERIFICAR que se guard√≥ correctamente
        cursor_db.execute("SELECT host, usuario, base_url FROM datos_host_local WHERE activo = 1")
        verificacion = cursor_db.fetchone()
        if verificacion:
            print(f"[DEBUG] ‚úÖ Verificaci√≥n: guardado correctamente - {verificacion[1]}@{verificacion[0]} - URL: {verificacion[2]}")
        else:
            print("[DEBUG] ‚ùå Verificaci√≥n: NO se pudo verificar el guardado")
        
        cursor.close()
        conexion.close()
        cursor_db.close()
        conexion_db.close()
        
        print(f"[SUCCESS] ‚úÖ Configuraci√≥n LOCAL guardada en tabla y archivo: {credenciales['user']}@{credenciales['host']}")
        return True
        
    except Error as e:
        print(f"[ERROR] ‚ùå No se pudo guardar configuraci√≥n: {e}")
        return False

def obtener_configuracion_automatica():
    """
    Obtener configuraci√≥n autom√°ticamente (archivo externo -> tabla)
    """
    print("\n[DEBUG] üîç BUSCANDO CONFIGURACI√ìN AUTOM√ÅTICA")
    
    # 1. PRIMERO: Buscar en archivo externo
    print("[DEBUG] 1. Buscando en archivo externo...")
    config_externa = cargar_configuracion_externa()
    
    if config_externa:
        print(f"[DEBUG] ‚úÖ Configuraci√≥n externa encontrada: {config_externa['user']}@{config_externa['host']}")
        try:
            # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
            parametros_conexion = {k: v for k, v in config_externa.items() 
                                 if k in ['host', 'user', 'password', 'database', 'port']}
            conexion = mysql.connector.connect(**parametros_conexion, connect_timeout=5)
            if conexion.is_connected():
                print("[SUCCESS] ‚úÖ Conexi√≥n desde archivo externo EXITOSA")
                conexion.close()
                return config_externa
        except Error as e:
            print(f"[DEBUG] ‚ùå Configuraci√≥n externa no funciona: {e}")
    
    # 2. SEGUNDO: Intentar leer de la tabla con m√©todos alternativos
    print("[DEBUG] 2. Intentando leer de tabla...")
    
    configuraciones_prueba = [
        {'host': "localhost", 'user': "root", 'password': "", 'database': "databaseapp", 'port': 3306, 'base_url': "http://localhost:5000"},
        {'host': "localhost", 'user': "root", 'password': "root", 'database': "databaseapp", 'port': 3306, 'base_url': "http://localhost:5000"},
        {'host': "127.0.0.1", 'user': "root", 'password': "", 'database': "databaseapp", 'port': 3306, 'base_url': "http://localhost:5000"},
    ]
    
    for config in configuraciones_prueba:
        try:
            print(f"[DEBUG] üîÑ Probando: {config['user']}@{config['host']}")
            # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
            parametros_conexion = {
                'host': config['host'],
                'user': config['user'], 
                'password': config['password'],
                'database': config['database'],
                'port': config['port'],
                'connect_timeout': 3
            }
            conexion = mysql.connector.connect(**parametros_conexion)
            cursor = conexion.cursor()
            
            # Leer configuraci√≥n de tabla
            cursor.execute("SELECT host, usuario, password, base_datos, puerto, base_url FROM datos_host_local WHERE activo = 1 LIMIT 1")
            resultado = cursor.fetchone()
            
            if resultado:
                host, user, password, database, port, base_url = resultado
                config_tabla = {
                    'host': host,
                    'user': user,
                    'password': password,
                    'database': database,
                    'port': port,
                    'base_url': base_url or "http://localhost:5000"  # ‚úÖ NUEVO
                }
                print(f"[DEBUG] üìã Configuraci√≥n de tabla: {user}@{host} - URL: {config_tabla['base_url']}")
                
                # Probar si funciona
                try:
                    # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
                    parametros_tabla = {k: v for k, v in config_tabla.items() 
                                      if k in ['host', 'user', 'password', 'database', 'port']}
                    conexion_tabla = mysql.connector.connect(**parametros_tabla, connect_timeout=3)
                    if conexion_tabla.is_connected():
                        print("[SUCCESS] ‚úÖ Configuraci√≥n de tabla FUNCIONA")
                        
                        # Guardar en archivo externo para pr√≥xima vez
                        guardar_configuracion_externa(config_tabla)
                        
                        conexion_tabla.close()
                        cursor.close()
                        conexion.close()
                        return config_tabla
                    conexion_tabla.close()
                except Error as e:
                    print(f"[DEBUG] ‚ùå Configuraci√≥n de tabla no funciona: {e}")
            
            cursor.close()
            conexion.close()
        except Error:
            continue
    
    print("[DEBUG] ‚ùå No se pudo obtener configuraci√≥n autom√°tica")
    return None

def conectar_local(parent=None):
    """
    Conexi√≥n DIRECTA a MySQL LOCAL para 'databaseapp'
    """
    print("\n" + "="*50)
    print("[DEBUG] üöÄ INICIANDO CONEXI√ìN LOCAL")
    print("="*50)
    
    global CREDENCIALES_LOCALES_TEMPORALES
    
    # PRIMERO: Intentar conexi√≥n autom√°tica (archivo -> tabla)
    print("[DEBUG] 1. Intentando conexi√≥n autom√°tica...")
    config_automatica = obtener_configuracion_automatica()
    
    if config_automatica:
        print(f"[DEBUG] ‚úÖ Configuraci√≥n autom√°tica obtenida: {config_automatica['user']}@{config_automatica['host']}")
        try:
            # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
            parametros_conexion = {k: v for k, v in config_automatica.items() 
                                 if k in ['host', 'user', 'password', 'database', 'port']}
            conexion = mysql.connector.connect(**parametros_conexion, connect_timeout=8)
            if conexion.is_connected():
                print("[SUCCESS] üéâ Conexi√≥n autom√°tica EXITOSA")
                # Actualizar variables globales
                CREDENCIALES_LOCALES_TEMPORALES = {
                    'host': config_automatica['host'],
                    'user': config_automatica['user'],
                    'password': config_automatica['password'],
                    'port': config_automatica['port'],
                    'base_url': config_automatica.get('base_url', 'http://localhost:5000')  # ‚úÖ NUEVO
                }
                return conexion
        except Error as e:
            print(f"[DEBUG] ‚ùå Conexi√≥n autom√°tica fall√≥: {e}")
    
    # SEGUNDO: Si no funciona autom√°tico, es primera instalaci√≥n o necesita reconfiguraci√≥n
    print("[DEBUG] 2. Primera instalaci√≥n o reconfiguraci√≥n necesaria...")
    
    # Intentar configuraciones autom√°ticas r√°pidas
    configuraciones_rapidas = [
        {'host': "localhost", 'user': "root", 'password': "", 'database': "databaseapp", 'port': 3306, 'base_url': "http://localhost:5000"},
        {'host': "localhost", 'user': "root", 'password': "root", 'database': "databaseapp", 'port': 3306, 'base_url': "http://localhost:5000"},
    ]
    
    for config in configuraciones_rapidas:
        try:
            print(f"[DEBUG] üîÑ Probando r√°pida: {config['user']}@{config['host']}")
            # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
            parametros_conexion = {k: v for k, v in config.items() 
                                 if k in ['host', 'user', 'password', 'database', 'port']}
            conexion = mysql.connector.connect(**parametros_conexion, connect_timeout=3)
            if conexion.is_connected():
                print(f"[SUCCESS] ‚úÖ Conexi√≥n r√°pida exitosa")
                
                # Preguntar si guardar esta configuraci√≥n
                respuesta = QMessageBox.question(parent, "Configuraci√≥n Encontrada", 
                    f"Se encontr√≥ una configuraci√≥n autom√°tica:\n\n"
                    f"Host: {config['host']}\nUsuario: {config['user']}\nBase URL: {config['base_url']}\n\n"
                    f"¬øDesea usar y guardar esta configuraci√≥n?",
                    QMessageBox.Yes | QMessageBox.No)
                
                if respuesta == QMessageBox.Yes:
                    credenciales = {
                        'host': config['host'],
                        'user': config['user'],
                        'password': config['password'],
                        'port': config['port'],
                        'base_url': config['base_url']  # ‚úÖ NUEVO
                    }
                    if conectar_y_guardar_configuracion(credenciales, parent):
                        conexion.close()
                        # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
                        parametros_conexion = {k: v for k, v in config.items() 
                                             if k in ['host', 'user', 'password', 'database', 'port']}
                        return mysql.connector.connect(**parametros_conexion, connect_timeout=5)
                
                conexion.close()
                break
        except Error:
            continue
    
    # TERCERO: Pedir credenciales al usuario (PRIMERA INSTALACI√ìN)
    print("[DEBUG] 3. Solicitando credenciales para primera instalaci√≥n...")
    
    credenciales = obtener_credenciales_mysql(parent, False)
    
    if not credenciales:
        print("[ERROR] ‚ùå Usuario cancel√≥ la configuraci√≥n")
        return None
    
    print(f"[DEBUG] Credenciales obtenidas: {credenciales['user']}@{credenciales['host']}")
    
    # Procesar y guardar las nuevas credenciales
    CREDENCIALES_LOCALES_TEMPORALES = credenciales.copy()
    
    if conectar_y_guardar_configuracion(credenciales, parent):
        print("[SUCCESS] ‚úÖ Configuraci√≥n guardada exitosamente")
        credenciales_con_db = credenciales.copy()
        credenciales_con_db['database'] = "databaseapp"
        # ‚úÖ FILTRAR par√°metros v√°lidos para MySQL
        parametros_conexion = {k: v for k, v in credenciales_con_db.items() 
                             if k in ['host', 'user', 'password', 'database', 'port']}
        return mysql.connector.connect(**parametros_conexion, connect_timeout=5)
    else:
        print("[ERROR] ‚ùå No se pudo guardar la configuraci√≥n")
    
    return None

def inicializar_base_datos_local(parent=None):
    """
    Funci√≥n principal para inicializar solo la DB local
    """
    print("Inicializando base de datos LOCAL...")
    conexion = conectar_local(parent)
    
    if conexion:
        print("[SUCCESS] Base de datos local inicializada correctamente")
        conexion.close()
        return True
    else:
        print("[ERROR] No se pudo inicializar base de datos local")
        return False

def obtener_configuracion_hosting(parent=None):
    """
    Leer configuraci√≥n del servidor REMOTO desde la tabla local
    """
    print("\n[DEBUG] üåê BUSCANDO CONFIGURACI√ìN HOSTING...")
    
    conexion = conectar_local(parent)
    if not conexion:
        print("[ERROR] ‚ùå No se pudo conectar localmente para leer hosting")
        return None
    
    try:
        cursor = conexion.cursor()
        cursor.execute("SELECT host, usuario, password, base_datos, puerto, base_url FROM datos_hosting WHERE activo = 1 LIMIT 1")
        config = cursor.fetchone()
        cursor.close()
        
        if config:
            host, user, password, database, port, base_url = config
            print(f"[DEBUG] üìã Configuraci√≥n HOSTING encontrada: {user}@{host}:{port}/{database} - URL: {base_url}")
            
            if host and host.strip():
                print(f"[SUCCESS] ‚úÖ Configuraci√≥n HOSTING v√°lida: {user}@{host}")
                return {
                    'host': host,
                    'user': user, 
                    'password': password,
                    'database': database,
                    'port': port,
                    'base_url': base_url or ""  # ‚úÖ NUEVO
                }
            else:
                print("[DEBUG] ‚ùå Host HOSTING est√° vac√≠o")
        else:
            print("[DEBUG] ‚ùå No hay configuraci√≥n HOSTING activa")
            
        # Si no hay configuraci√≥n v√°lida, mostrar di√°logo
        print("[DEBUG] Mostrando di√°logo para configuraci√≥n HOSTING...")
        return mostrar_dialogo_configuracion_hosting(parent)
        
    except Exception as e:
        print(f"[ERROR] ‚ùå Error al leer configuraci√≥n HOSTING: {e}")
        return None
    finally:
        if conexion and conexion.is_connected():
            conexion.close()

def mostrar_dialogo_configuracion_hosting(parent=None):
    """
    Mostrar di√°logo para configurar conexi√≥n al HOSTING REMOTO
    """
    try:
        from dialogo_config_bd import DialogoConfigBD
        
        app = QApplication.instance()
        if not app:
            app = QApplication([])
        
        QMessageBox.information(parent, "Configuraci√≥n de Hosting", 
                              "Ahora necesita configurar la conexi√≥n al servidor HOSTING REMOTO.")
        
        dialogo = DialogoConfigBD(parent)
        dialogo.setWindowTitle("üåê Configuraci√≥n de Hosting Remoto")
        
        resultado = dialogo.exec_()
        print(f"[DEBUG] Resultado del di√°logo hosting: {resultado}")
        
        if resultado == QDialog.Accepted:
            print("[DEBUG] Di√°logo hosting aceptado, guardando configuraci√≥n...")
            
            # ‚úÖ OBTENER los datos del di√°logo directamente
            host = dialogo.host_input.text().strip()
            usuario = dialogo.usuario_input.text().strip()
            password = dialogo.password_input.text()
            base_datos = dialogo.bd_input.text().strip()
            puerto = dialogo.puerto_input.value()
            base_url = dialogo.base_url_input.text().strip() if hasattr(dialogo, 'base_url_input') else ""  # ‚úÖ NUEVO
            
            print(f"[DEBUG] Datos hosting a guardar: {usuario}@{host}:{puerto}/{base_datos} - URL: {base_url}")
            
            # ‚úÖ GUARDAR directamente la configuraci√≥n
            if guardar_configuracion_hosting(host, usuario, password, base_datos, puerto, base_url, parent):
                print("[SUCCESS] ‚úÖ Configuraci√≥n HOSTING guardada correctamente")
                # ‚úÖ LEER la configuraci√≥n reci√©n guardada
                config_guardada = obtener_configuracion_hosting_sin_dialogo(parent)
                if config_guardada:
                    print(f"[SUCCESS] ‚úÖ Configuraci√≥n HOSTING verificada: {config_guardada['user']}@{config_guardada['host']}")
                    return config_guardada
                else:
                    print("[ERROR] ‚ùå No se pudo verificar la configuraci√≥n HOSTING guardada")
                    return None
            else:
                print("[ERROR] ‚ùå No se pudo guardar la configuraci√≥n HOSTING")
                return None
        else:
            QMessageBox.warning(parent, "Configuraci√≥n Requerida", 
                              "Debe configurar la conexi√≥n al HOSTING para continuar.")
            return None
            
    except Exception as e:
        print(f"[ERROR] ‚ùå Error en di√°logo HOSTING: {e}")
        return None

def obtener_configuracion_hosting_sin_dialogo(parent=None):
    """
    Leer configuraci√≥n HOSTING sin mostrar di√°logo
    """
    conexion = conectar_local(parent)
    if not conexion:
        return None
    
    try:
        cursor = conexion.cursor()
        cursor.execute("SELECT host, usuario, password, base_datos, puerto, base_url FROM datos_hosting WHERE activo = 1 LIMIT 1")
        config = cursor.fetchone()
        cursor.close()
        
        if config and all(config) and config[0]:
            host, user, password, database, port, base_url = config
            return {
                'host': host,
                'user': user, 
                'password': password,
                'database': database,
                'port': port,
                'base_url': base_url or ""  # ‚úÖ NUEVO
            }
        return None
        
    except Exception as e:
        print(f"Error al leer configuraci√≥n HOSTING: {e}")
        return None
    finally:
        if conexion.is_connected():
            conexion.close()

def guardar_configuracion_hosting(host, usuario, password, base_datos, puerto=3306, base_url="", parent=None):
    """
    Guardar configuraci√≥n del servidor REMOTO en la tabla local
    """
    print(f"[DEBUG] üõ†Ô∏è Guardando configuraci√≥n HOSTING: {usuario}@{host}:{puerto}/{base_datos} - URL: {base_url}")
    
    conexion = conectar_local(parent)
    if not conexion:
        print("[ERROR] ‚ùå No se pudo conectar localmente para guardar hosting")
        return False
    
    try:
        cursor = conexion.cursor()
        
        # Limpiar configuraciones anteriores
        print("[DEBUG] Limpiando configuraciones HOSTING anteriores...")
        cursor.execute("UPDATE datos_hosting SET activo = 0")
        
        # Insertar nueva configuraci√≥n activa
        print("[DEBUG] Insertando nueva configuraci√≥n HOSTING...")
        cursor.execute("""
            INSERT INTO datos_hosting (host, usuario, password, base_datos, puerto, base_url, activo)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (host, usuario, password, base_datos, puerto, base_url, True))
        
        conexion.commit()
        
        # VERIFICAR que se guard√≥ correctamente
        cursor.execute("SELECT host, usuario, base_datos, base_url FROM datos_hosting WHERE activo = 1 LIMIT 1")
        verificacion = cursor.fetchone()
        
        cursor.close()
        conexion.close()
        
        if verificacion:
            host_verif, usuario_verif, bd_verif, url_verif = verificacion
            print(f"[SUCCESS] ‚úÖ Configuraci√≥n HOSTING guardada y verificada: {usuario_verif}@{host_verif}/{bd_verif} - URL: {url_verif}")
            return True
        else:
            print("[ERROR] ‚ùå No se pudo verificar el guardado HOSTING")
            return False
        
    except Exception as e:
        print(f"[ERROR] ‚ùå Error al guardar configuraci√≥n HOSTING: {e}")
        try:
            if conexion.is_connected():
                conexion.close()
        except:
            pass
        return False

def cerrar_conexion(conexion):
    """
    Cerrar conexi√≥n de forma segura
    """
    if conexion and conexion.is_connected():
        conexion.close()

def conectar_base_datos(parent=None):
    """
    Funci√≥n alias para mantener compatibilidad con c√≥digo existente
    """
    return conectar_local(parent)