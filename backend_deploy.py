import os
import subprocess
import sys
import shutil
import time
import requests
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
                             QPushButton, QTextEdit, QProgressBar, QMessageBox,
                             QGroupBox, QComboBox, QLineEdit, QScrollArea, QWidget)
from PyQt5.QtCore import Qt, QThread, pyqtSignal

class BackendDeployThread(QThread):
    """Hilo para ejecutar deploy COMPLETO del backend incluyendo assets"""
    log_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(bool, str)
    
    def __init__(self, backend_path, servidor_config=None):
        super().__init__()
        self.backend_path = backend_path
        self.servidor_config = servidor_config or {}
        self.datos_hosting = servidor_config.get('datos_hosting', {})
        
    def run(self):
        try:
            self.log_signal.emit("üöÄ INICIANDO DEPLOY COMPLETO DEL BACKEND")
            self.log_signal.emit("=" * 50)
            
            # Mostrar informaci√≥n del hosting desde BD
            if self.datos_hosting:
                self.log_signal.emit(f"üåê Host: {self.datos_hosting.get('host', 'N/A')}")
                self.log_signal.emit(f"üîó URL: {self.datos_hosting.get('base_url', 'N/A')}")
                self.log_signal.emit(f"üë§ Usuario: {self.datos_hosting.get('usuario', 'N/A')}")
                self.log_signal.emit("-" * 30)
            
            # Paso 1: Verificar que existe el backend
            if not os.path.exists(self.backend_path):
                self.finished_signal.emit(False, f"No se encuentra backend en: {self.backend_path}")
                return
                
            self.log_signal.emit(f"üìÅ Backend encontrado en: {self.backend_path}")
            self.progress_signal.emit(10)
            
            # Paso 2: Verificar y crear archivos esenciales PARA PRODUCCI√ìN
            if not self.preparar_archivos_produccion():
                return
            
            self.progress_signal.emit(20)
            
            # Paso 3: Copiar assets
            if not self.copiar_assets_al_repositorio():
                return
            
            self.progress_signal.emit(40)
            
            # Paso 4: Obtener configuraci√≥n del servidor
            servidor = self.servidor_config.get('nombre', 'personalizado')
            tipo = self.servidor_config.get('tipo', 'git')
            comando = self.servidor_config.get('comando', '')
            
            self.log_signal.emit(f"üåê Servidor: {servidor}")
            self.log_signal.emit(f"üîß Tipo: {tipo}")
            
            # Paso 5: Ejecutar deploy seg√∫n el tipo
            resultado = self.ejecutar_deploy(tipo, servidor, comando)
            
            if resultado:
                self.progress_signal.emit(80)
                
                # Paso 6: Verificar deploy
                if self.verificar_deploy():
                    self.progress_signal.emit(100)
                    self.finished_signal.emit(True, f"‚úÖ ¬°DEPLOY COMPLETADO EXITOSAMENTE! üéâ\n\nTu aplicaci√≥n est√° funcionando en PRODUCCI√ìN:\n{self.datos_hosting.get('base_url', 'N/A')}")
                else:
                    self.finished_signal.emit(True, f"‚ö†Ô∏è  Deploy completado pero la verificaci√≥n mostr√≥ advertencias")
            else:
                self.finished_signal.emit(False, f"‚ùå Error en el deploy a {servidor}")
            
        except Exception as e:
            self.finished_signal.emit(False, f"‚ùå Error: {str(e)}")
    
    def preparar_archivos_produccion(self):
        """Verificar y crear archivos esenciales para PRODUCCI√ìN"""
        self.log_signal.emit("üîß Configurando para PRODUCCI√ìN...")
        
        # ‚úÖ 1. ACTUALIZAR requirements.txt CON GUNICORN
        requirements_path = os.path.join(self.backend_path, "requirements.txt")
        if os.path.exists(requirements_path):
            try:
                with open(requirements_path, 'r', encoding='utf-8') as f:
                    contenido = f.read()
                
                if 'gunicorn' not in contenido:
                    self.log_signal.emit("üì¶ Agregando gunicorn a requirements.txt...")
                    with open(requirements_path, 'a', encoding='utf-8') as f:
                        f.write("\ngunicorn==20.1.0\n")
                    self.log_signal.emit("‚úÖ gunicorn agregado para producci√≥n")
                else:
                    self.log_signal.emit("‚úÖ gunicorn ya est√° en requirements.txt")
            except Exception as e:
                self.log_signal.emit(f"‚ö†Ô∏è  Error actualizando requirements.txt: {str(e)}")
        
        # ‚úÖ 2. CREAR/MODIFICAR Procfile PARA PRODUCCI√ìN
        procfile_path = os.path.join(self.backend_path, "Procfile")
        try:
            procfile_content = "web: gunicorn api:app --bind 0.0.0.0:$PORT --workers 2 --timeout 120"
            with open(procfile_path, 'w', encoding='utf-8') as f:
                f.write(procfile_content)
            self.log_signal.emit("‚úÖ Procfile configurado para producci√≥n con gunicorn")
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error creando Procfile: {str(e)}")
            return False
        
        # ‚úÖ 3. CREAR/MODIFICAR railway.toml
        railway_toml_path = os.path.join(self.backend_path, "railway.toml")
        try:
            railway_config = """[build]
builder = "nixpacks"

[deploy]
startCommand = "gunicorn api:app --bind 0.0.0.0:$PORT --workers 2 --timeout 120"

[[services]]
name = "web"
type = "web"
"""
            with open(railway_toml_path, 'w', encoding='utf-8') as f:
                f.write(railway_config)
            self.log_signal.emit("‚úÖ railway.toml configurado para producci√≥n")
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error creando railway.toml: {str(e)}")
            return False
        
        # ‚úÖ 4. VERIFICAR ARCHIVOS ESENCIALES
        archivos_esenciales = {
            "api.py": "Servidor Flask principal",
            "requirements.txt": "Dependencias Python", 
            "database_hosting.py": "Conexi√≥n BD",
            "railway.toml": "Configuraci√≥n Railway",
            "Procfile": "Configuraci√≥n proceso",
            "runtime.txt": "Versi√≥n Python"
        }
        
        todos_encontrados = True
        for archivo, descripcion in archivos_esenciales.items():
            ruta_archivo = os.path.join(self.backend_path, archivo)
            if os.path.exists(ruta_archivo):
                self.log_signal.emit(f"‚úÖ {archivo} - {descripcion}")
            else:
                self.log_signal.emit(f"‚ùå {archivo} - {descripcion} - FALTANTE")
                if archivo in ["api.py", "requirements.txt"]:
                    todos_encontrados = False
        
        return todos_encontrados
    
    def copiar_assets_al_repositorio(self):
        """Copiar assets desde turismo-app/public/assets al repositorio"""
        try:
            base_dir = os.path.dirname(self.backend_path)
            assets_origen = os.path.join(base_dir, "public", "assets")
            assets_origen = os.path.abspath(assets_origen)
            
            assets_destino = os.path.join(self.backend_path, "assets")
            
            self.log_signal.emit(f"üìÅ Buscando assets en: {assets_origen}")
            
            if not os.path.exists(assets_origen):
                self.log_signal.emit("‚ö†Ô∏è  No se encontraron assets en public/assets")
                return True
            
            try:
                contenido = os.listdir(assets_origen)
                if not contenido:
                    self.log_signal.emit("‚ÑπÔ∏è  Carpeta assets vac√≠a")
                    return True
                
                self.log_signal.emit(f"üì¶ Encontrados {len(contenido)} elementos en assets")
                for item in contenido:
                    ruta_item = os.path.join(assets_origen, item)
                    if os.path.isdir(ruta_item):
                        subitems = os.listdir(ruta_item)
                        self.log_signal.emit(f"   üìÇ {item}/ ({len(subitems)} elementos)")
                    else:
                        self.log_signal.emit(f"   üìÑ {item}")
                        
            except Exception as e:
                self.log_signal.emit(f"‚ö†Ô∏è  Error listando assets: {str(e)}")
                return True
            
            self.log_signal.emit("üîÑ Copiando assets al repositorio...")
            
            if not os.path.exists(assets_destino):
                os.makedirs(assets_destino)
                self.log_signal.emit("‚úÖ Carpeta assets creada en repositorio")
            
            items_copiados = 0
            for item in contenido:
                origen_item = os.path.join(assets_origen, item)
                destino_item = os.path.join(assets_destino, item)
                
                try:
                    if os.path.isdir(origen_item):
                        if os.path.exists(destino_item):
                            shutil.rmtree(destino_item)
                        shutil.copytree(origen_item, destino_item)
                        self.log_signal.emit(f"   ‚úÖ Carpeta: {item}")
                    else:
                        shutil.copy2(origen_item, destino_item)
                        self.log_signal.emit(f"   ‚úÖ Archivo: {item}")
                    
                    items_copiados += 1
                except Exception as e:
                    self.log_signal.emit(f"   ‚ö†Ô∏è  Error copiando {item}: {str(e)}")
                    continue
            
            self.log_signal.emit(f"‚úÖ {items_copiados} assets copiados exitosamente")
            
            if os.path.exists(assets_destino):
                try:
                    assets_copiados = len(os.listdir(assets_destino))
                    self.log_signal.emit(f"üìä Verificaci√≥n: {assets_copiados} assets en repositorio")
                except:
                    self.log_signal.emit("‚úÖ Assets copiados al repositorio")
            
            return True
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error copiando assets: {str(e)}")
            return False
    
    def ejecutar_deploy(self, tipo, servidor, comando_personalizado=""):
        """Ejecutar deploy seg√∫n el tipo de servidor"""
        try:
            if tipo == "cli":
                return self.deploy_con_cli(servidor, comando_personalizado)
            elif tipo == "git":
                return self.deploy_con_git_completo(servidor, comando_personalizado)
            elif tipo == "manual":
                return self.deploy_manual(servidor)
            else:
                return self.deploy_con_git_completo(servidor, comando_personalizado)
                
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error en deploy {servidor}: {str(e)}")
            return self.deploy_con_git_completo(servidor, comando_personalizado)
    
    def deploy_con_cli(self, servidor, comando_personalizado=""):
        """Deploy usando CLI espec√≠fico (Railway, Heroku, etc.)"""
        try:
            self.log_signal.emit(f"üîß Ejecutando deploy via CLI para {servidor}...")
            
            # Determinar qu√© CLI usar basado en el servidor
            if "railway" in servidor.lower():
                cli_tool = "railway"
                comando_base = "railway deploy"
            elif "heroku" in servidor.lower():
                cli_tool = "heroku"
                comando_base = "git push heroku main"
            else:
                # CLI gen√©rico
                cli_tool = servidor
                comando_base = comando_personalizado
            
            # Verificar que la CLI est√° instalada
            if not self.verificar_herramienta(cli_tool):
                self.log_signal.emit(f"‚ùå {cli_tool} CLI no encontrado")
                return False
            
            # Ejecutar comando de deploy
            comando = comando_personalizado if comando_personalizado else comando_base
            self.log_signal.emit(f"üöÄ Ejecutando: {comando}")
            
            os.chdir(self.backend_path)
            result = subprocess.run(
                comando.split(), 
                capture_output=True, 
                text=True,
                timeout=300
            )
            
            if result.returncode == 0:
                self.log_signal.emit(f"‚úÖ Deploy via {cli_tool} exitoso!")
                if result.stdout:
                    for linea in result.stdout.split('\n'):
                        if linea.strip():
                            self.log_signal.emit(f"   üì§ {linea.strip()}")
                return True
            else:
                self.log_signal.emit(f"‚ùå Error en {cli_tool} deploy: {result.stderr}")
                return False
                
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error en CLI deploy: {str(e)}")
            return False

    def deploy_manual(self, servidor):
        """Provee instrucciones para deploy manual"""
        try:
            self.log_signal.emit("üìã MODO MANUAL - INSTRUCCIONES:")
            self.log_signal.emit("=" * 50)
            
            # Instrucciones espec√≠ficas basadas en el servidor
            if "railway" in servidor.lower():
                instrucciones = [
                    "1. Abrir terminal en la carpeta del backend",
                    "2. Ejecutar: railway login",
                    "3. Ejecutar: railway link (si no est√° vinculado)",
                    "4. Ejecutar: railway deploy",
                    "5. O usar: git push origin main (si est√° conectado a GitHub)"
                ]
            elif "heroku" in servidor.lower():
                instrucciones = [
                    "1. Abrir terminal en la carpeta del backend", 
                    "2. Ejecutar: heroku login",
                    "3. Ejecutar: git push heroku main",
                    "4. O usar: heroku deploy:war"
                ]
            else:
                instrucciones = [
                    "1. Subir manualmente los archivos al servidor",
                    "2. Asegurar que requirements.txt tenga gunicorn",
                    "3. Configurar Procfile para producci√≥n",
                    "4. Reiniciar servicio web"
                ]
            
            for paso in instrucciones:
                self.log_signal.emit(f"   {paso}")
            
            self.log_signal.emit("")
            self.log_signal.emit("üìÅ Archivos preparados para deploy manual:")
            
            # Listar archivos esenciales
            archivos_esenciales = [
                "api.py", "requirements.txt", "database_hosting.py",
                "railway.toml", "Procfile", "assets/", "runtime.txt"
            ]
            
            for archivo in archivos_esenciales:
                ruta = os.path.join(self.backend_path, archivo)
                if os.path.exists(ruta):
                    if os.path.isdir(ruta):
                        num_items = len(os.listdir(ruta))
                        self.log_signal.emit(f"   ‚úÖ {archivo} ({num_items} elementos)")
                    else:
                        self.log_signal.emit(f"   ‚úÖ {archivo}")
                else:
                    self.log_signal.emit(f"   ‚ùå {archivo} - FALTANTE")
            
            self.log_signal.emit("")
            self.log_signal.emit("üéØ El backend est√° listo para deploy manual")
            return True
            
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error generando instrucciones: {str(e)}")
            return False
    
    def deploy_con_git_completo(self, servidor, comando):
        """‚úÖ DEPLOY COMPLETO con Git - Con pull autom√°tico"""
        try:
            self.log_signal.emit(f"üì¶ Ejecutando DEPLOY AUTOM√ÅTICO via Git...")
            
            if not self.verificar_herramienta("git"):
                self.log_signal.emit("‚ùå Git no encontrado en el sistema")
                return False
            
            os.chdir(self.backend_path)
            
            if not os.path.exists(".git"):
                self.log_signal.emit("‚ùå No es un repositorio Git")
                return False
            
            # ‚úÖ PASO 1: GIT PULL para traer cambios remotos
            self.log_signal.emit("üîÑ Sincronizando con repositorio remoto...")
            result_pull = subprocess.run(
                ["git", "pull", "origin", "main"], 
                capture_output=True, 
                text=True
            )
            
            if result_pull.returncode == 0:
                self.log_signal.emit("‚úÖ Sincronizaci√≥n completada")
                if result_pull.stdout:
                    for linea in result_pull.stdout.split('\n'):
                        if linea.strip() and any(x in linea for x in ['Already up to date', 'Updating', 'Fast-forward']):
                            self.log_signal.emit(f"   üîÑ {linea.strip()}")
            else:
                self.log_signal.emit(f"‚ö†Ô∏è  Advertencia en sincronizaci√≥n: {result_pull.stderr}")
            
            # ‚úÖ PASO 2: AGREGAR TODOS LOS ARCHIVOS
            self.log_signal.emit("üíæ Agregando archivos al staging...")
            result_add = subprocess.run(
                ["git", "add", "."], 
                capture_output=True, 
                text=True
            )
            
            if result_add.returncode != 0:
                self.log_signal.emit(f"‚ùå Error agregando archivos: {result_add.stderr}")
                return False
            
            self.log_signal.emit("‚úÖ Todos los archivos agregados al staging")
            
            # ‚úÖ PASO 3: COMMIT
            mensaje_commit = f"Deploy PRODUCCI√ìN: API + Assets + Gunicorn - {time.strftime('%Y-%m-%d %H:%M')}"
            self.log_signal.emit(f"üíæ Realizando commit: {mensaje_commit}")
            
            commit_result = subprocess.run(
                ["git", "commit", "-m", mensaje_commit], 
                capture_output=True, 
                text=True
            )
            
            if commit_result.returncode == 0:
                self.log_signal.emit("‚úÖ Commit realizado exitosamente")
            else:
                self.log_signal.emit("‚ÑπÔ∏è  Sin cambios para commitear (posiblemente ya estaban commiteados)")
            
            # ‚úÖ PASO 4: PUSH
            comando_push = comando if comando else "git push origin main"
            self.log_signal.emit(f"üîß Ejecutando: {comando_push}")
            
            result_push = subprocess.run(
                comando_push.split(), 
                capture_output=True, 
                text=True,
                timeout=300
            )
            
            if result_push.returncode == 0:
                self.log_signal.emit("üéâ ¬°PUSH EXITOSO A GITHUB!")
                if result_push.stdout:
                    for linea in result_push.stdout.split('\n'):
                        if linea.strip() and any(x in linea for x in ['Writing objects', 'To http', 'master ->', 'main ->']):
                            self.log_signal.emit(f"   üì§ {linea.strip()}")
                
                # Verificar assets en GitHub
                self.verificar_assets_en_git()
                
                self.log_signal.emit("üîÑ Railway detectar√° los cambios autom√°ticamente...")
                self.log_signal.emit("‚è≥ El deploy en Railway puede tomar 2-5 minutos")
                self.log_signal.emit("üöÄ Configurado para PRODUCCI√ìN con Gunicorn")
                
                return True
            else:
                self.log_signal.emit(f"‚ùå Error en push: {result_push.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.log_signal.emit("‚ùå Timeout: El push tard√≥ demasiado")
            return False
        except Exception as e:
            self.log_signal.emit(f"‚ùå Error: {str(e)}")
            return False
    
    def verificar_assets_en_git(self):
        """Verificar que los assets se subieron a GitHub"""
        try:
            result = subprocess.run(
                ["git", "ls-tree", "-r", "HEAD", "--name-only"], 
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                archivos = result.stdout.split('\n')
                assets_subidos = [f for f in archivos if f.startswith('assets/')]
                
                if assets_subidos:
                    self.log_signal.emit(f"‚úÖ {len(assets_subidos)} assets subidos a GitHub")
                    # Mostrar primeros 5 assets como ejemplo
                    for asset in assets_subidos[:5]:
                        self.log_signal.emit(f"   üìÑ {asset}")
                    if len(assets_subidos) > 5:
                        self.log_signal.emit(f"   ... y {len(assets_subidos) - 5} m√°s")
                else:
                    self.log_signal.emit("‚ö†Ô∏è  No se detectaron assets en el repositorio")
        except Exception as e:
            self.log_signal.emit(f"‚ö†Ô∏è  No se pudo verificar assets: {str(e)}")
    
    def verificar_deploy(self):
        """Verificar que el deploy funcion√≥ correctamente"""
        try:
            base_url = self.datos_hosting.get('base_url')
            if not base_url or base_url == 'No configurada':
                return True
            
            self.log_signal.emit("üîç Verificando estado del servidor en PRODUCCI√ìN...")
            self.log_signal.emit(f"üåê URL: {base_url}")
            
            endpoints = [
                "/api/info-servidor",
                "/api/configuracion",
                "/"
            ]
            
            todos_funcionan = True
            for endpoint in endpoints:
                url = base_url + endpoint
                try:
                    response = requests.get(url, timeout=15)
                    if response.status_code == 200:
                        self.log_signal.emit(f"‚úÖ {endpoint} - FUNCIONA")
                        if endpoint == "/api/info-servidor":
                            try:
                                data = response.json()
                                if 'mensaje' in data:
                                    self.log_signal.emit(f"   üí¨ {data['mensaje']}")
                                if 'entorno' in data:
                                    self.log_signal.emit(f"   üè≠ Entorno: {data['entorno']}")
                            except:
                                pass
                    else:
                        self.log_signal.emit(f"‚ö†Ô∏è  {endpoint} - Error {response.status_code}")
                        todos_funcionan = False
                except requests.exceptions.RequestException as e:
                    self.log_signal.emit(f"‚ùå {endpoint} - No responde: {str(e)}")
                    todos_funcionan = False
            
            if todos_funcionan:
                self.log_signal.emit("üéä ¬°TODOS LOS ENDPOINTS FUNCIONAN EN PRODUCCI√ìN!")
                self.log_signal.emit("‚úÖ Servidor configurado con Gunicorn para producci√≥n")
            else:
                self.log_signal.emit("‚ö†Ô∏è  Algunos endpoints tienen problemas")
            
            return True
            
        except Exception as e:
            self.log_signal.emit(f"‚ö†Ô∏è  Error en verificaci√≥n: {str(e)}")
            return False
    
    def verificar_herramienta(self, herramienta):
        """Verificar si una herramienta est√° instalada"""
        try:
            result = subprocess.run(
                [herramienta, "--version"], 
                capture_output=True, 
                text=True,
                shell=True,
                timeout=10  # Agregado timeout de 10 segundos
            )
            return result.returncode == 0
        except subprocess.TimeoutExpired:
            self.log_signal.emit(f"‚ö†Ô∏è  Timeout verificando {herramienta}")
            return False
        except:
            return False

class DialogoBackendDeploy(QDialog):
    """Di√°logo para deploy COMPLETO del backend en PRODUCCI√ìN"""
    
    def __init__(self, parent=None, backend_path=None):
        super().__init__(parent)
        self.backend_path = backend_path or r"E:\Sistemas de app para androide\turismo-app\turismo-backend"
        self.datos_hosting = None
        self.setup_ui()
        self.cargar_configuracion_desde_bd()
    
    def cargar_configuracion_desde_bd(self):
        """Cargar configuraci√≥n desde BD"""
        try:
            from database_local import obtener_configuracion_hosting
            
            self.datos_hosting = obtener_configuracion_hosting()
            
            if self.datos_hosting and self.datos_hosting.get('host'):
                host = self.datos_hosting.get('host', 'N/A')
                base_url = self.datos_hosting.get('base_url', 'No configurada')
                
                usuario = self.datos_hosting.get('usuario') or self.datos_hosting.get('user') or 'N/A'
                base_datos = self.datos_hosting.get('base_datos') or self.datos_hosting.get('database') or 'N/A'
                puerto = self.datos_hosting.get('puerto') or self.datos_hosting.get('port') or 'N/A'
                
                info_text = (
                    f"üåê Host: {host}\n"
                    f"üîó URL: {base_url}\n"
                    f"üë§ Usuario: {usuario}\n"
                    f"üóÉÔ∏è BD: {base_datos}\n"
                    f"üîí Puerto: {puerto}"
                )
                
                self.lbl_info_hosting.setText(info_text)
                self.log(f"‚úÖ Configuraci√≥n cargada: {host}")
                
                # Auto-seleccionar Git como m√©todo principal
                self.combo_tipo.setCurrentText("üì¶ Git (Autom√°tico)")
                self.txt_comando.setText("git push origin main")
                
            else:
                self.lbl_info_hosting.setText("‚ùå No hay configuraci√≥n de hosting")
                self.log("‚ö†Ô∏è  Configure primero el hosting")
                
        except Exception as e:
            self.lbl_info_hosting.setText("‚ùå Error cargando configuraci√≥n")
            self.log(f"‚ùå Error: {str(e)}")

    def setup_ui(self):
        self.setWindowTitle("üöÄ Deploy PRODUCCI√ìN - Backend + Assets")
        self.setFixedSize(680, 520)
        
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_content = QWidget()
        layout = QVBoxLayout(scroll_content)
        layout.setSpacing(10)
        layout.setContentsMargins(12, 12, 12, 12)
        
        # T√≠tulo
        titulo = QLabel("üöÄ DEPLOY COMPLETO PARA PRODUCCI√ìN")
        titulo.setStyleSheet("font-size: 14px; font-weight: bold; color: #2c3e50; margin: 8px 0px;")
        layout.addWidget(titulo)
        
        # Informaci√≥n del hosting
        info_hosting_group = QGroupBox("üåê Configuraci√≥n de Hosting")
        info_hosting_layout = QVBoxLayout()
        
        self.lbl_info_hosting = QLabel("Cargando configuraci√≥n...")
        self.lbl_info_hosting.setStyleSheet("font-size: 11px; color: #2c3e50; padding: 10px; background-color: #f8f9fa; line-height: 1.4;")
        self.lbl_info_hosting.setWordWrap(True)
        self.lbl_info_hosting.setMinimumHeight(80)
        info_hosting_layout.addWidget(self.lbl_info_hosting)
        
        info_hosting_group.setLayout(info_hosting_layout)
        layout.addWidget(info_hosting_group)
        
        # Configuraci√≥n de deploy
        config_group = QGroupBox("‚öôÔ∏è Configuraci√≥n de Deploy")
        config_layout = QVBoxLayout()
        config_layout.setSpacing(8)
        
        lbl_tipo = QLabel("M√©todo de deploy:")
        lbl_tipo.setStyleSheet("font-size: 11px; font-weight: bold;")
        config_layout.addWidget(lbl_tipo)
        
        self.combo_tipo = QComboBox()
        tipos = ["üì¶ Git (Autom√°tico)", "üîß CLI (Railway)", "üìã Manual"]
        self.combo_tipo.addItems(tipos)
        self.combo_tipo.setStyleSheet("font-size: 11px; padding: 6px; height: 30px;")
        config_layout.addWidget(self.combo_tipo)
        
        lbl_comando = QLabel("Comando:")
        lbl_comando.setStyleSheet("font-size: 11px; font-weight: bold;")
        config_layout.addWidget(lbl_comando)
        
        self.txt_comando = QLineEdit()
        self.txt_comando.setPlaceholderText("git push origin main")
        self.txt_comando.setStyleSheet("padding: 6px; font-size: 11px; height: 30px;")
        config_layout.addWidget(self.txt_comando)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Informaci√≥n del backend
        info_backend_group = QGroupBox("üìÅ Archivos para PRODUCCI√ìN")
        info_backend_layout = QVBoxLayout()
        
        self.lbl_backend = QLabel(f"üìÅ {self.backend_path}")
        self.lbl_backend.setStyleSheet("font-size: 10px; color: #7f8c8d;")
        
        self.lbl_archivos = QLabel("üîç Verificando...")
        self.lbl_archivos.setStyleSheet("font-size: 10px; line-height: 1.3;")
        self.lbl_archivos.setWordWrap(True)
        self.lbl_archivos.setMinimumHeight(60)
        
        info_backend_layout.addWidget(self.lbl_backend)
        info_backend_layout.addWidget(self.lbl_archivos)
        info_backend_group.setLayout(info_backend_layout)
        layout.addWidget(info_backend_group)
        
        # Log output
        lbl_log = QLabel("üìù Log de ejecuci√≥n:")
        lbl_log.setStyleSheet("font-size: 11px; font-weight: bold;")
        layout.addWidget(lbl_log)
        
        self.log_output = QTextEdit()
        self.log_output.setMaximumHeight(120)
        self.log_output.setReadOnly(True)
        self.log_output.setStyleSheet("font-family: 'Consolas'; font-size: 9px; background-color: #f8f9fa;")
        layout.addWidget(self.log_output)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximumHeight(10)
        layout.addWidget(self.progress_bar)
        
        # Botones
        botones_layout = QHBoxLayout()
        botones_layout.setSpacing(8)
        
        self.btn_deploy = QPushButton("üöÄ Deploy PRODUCCI√ìN (Gunicorn)")
        self.btn_deploy.setStyleSheet("QPushButton { background-color: #27ae60; color: white; padding: 8px 15px; border: none; border-radius: 4px; font-weight: bold; font-size: 11px; min-width: 200px; } QPushButton:hover { background-color: #219a52; } QPushButton:disabled { background-color: #bdc3c7; }")
        
        self.btn_verificar = QPushButton("üîç Verificar")
        self.btn_verificar.setStyleSheet("QPushButton { background-color: #3498db; color: white; padding: 8px 15px; border: none; border-radius: 4px; font-weight: bold; font-size: 11px; min-width: 100px; } QPushButton:hover { background-color: #2980b9; }")
        
        self.btn_limpiar = QPushButton("üóëÔ∏è Limpiar")
        self.btn_limpiar.setStyleSheet("QPushButton { background-color: #f39c12; color: white; padding: 8px 15px; border: none; border-radius: 4px; font-weight: bold; font-size: 11px; min-width: 100px; } QPushButton:hover { background-color: #e67e22; }")
        
        self.btn_cerrar = QPushButton("‚ùå Cerrar")
        self.btn_cerrar.setStyleSheet("QPushButton { background-color: #e74c3c; color: white; padding: 8px 15px; border: none; border-radius: 4px; font-weight: bold; font-size: 11px; min-width: 100px; } QPushButton:hover { background-color: #c0392b; }")
        
        botones_layout.addWidget(self.btn_deploy)
        botones_layout.addWidget(self.btn_verificar)
        botones_layout.addWidget(self.btn_limpiar)
        botones_layout.addWidget(self.btn_cerrar)
        
        layout.addLayout(botones_layout)
        
        scroll.setWidget(scroll_content)
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(scroll)
        
        self.btn_deploy.clicked.connect(self.iniciar_deploy)
        self.btn_verificar.clicked.connect(self.verificar_archivos)
        self.btn_limpiar.clicked.connect(self.limpiar_log)
        self.btn_cerrar.clicked.connect(self.close)
        
        self.deploy_thread = None
        self.verificar_archivos()

    def verificar_archivos(self):
        """Verificar archivos para deploy en producci√≥n"""
        try:
            archivos_esenciales = {
                "api.py": "Servidor Flask",
                "requirements.txt": "Dependencias", 
                "database_hosting.py": "Conexi√≥n BD",
                "railway.toml": "Config Railway",
                "Procfile": "Config Proceso",
                ".git": "Repositorio Git"
            }
            
            mensaje = ""
            for archivo, descripcion in archivos_esenciales.items():
                ruta_archivo = os.path.join(self.backend_path, archivo)
                existe = os.path.exists(ruta_archivo)
                icono = "‚úÖ" if existe else "‚ùå"
                mensaje += f"{icono} {archivo} - {descripcion}\n"
            
            # Verificar gunicorn en requirements
            requirements_path = os.path.join(self.backend_path, "requirements.txt")
            if os.path.exists(requirements_path):
                with open(requirements_path, 'r') as f:
                    contenido = f.read()
                if 'gunicorn' in contenido:
                    mensaje += "‚úÖ Gunicorn - Configurado para producci√≥n\n"
                else:
                    mensaje += "‚ùå Gunicorn - Faltante para producci√≥n\n"
            
            # Verificar assets
            base_dir = os.path.dirname(self.backend_path)
            assets_origen = os.path.join(base_dir, "public", "assets")
            if os.path.exists(assets_origen):
                try:
                    num_assets = len(os.listdir(assets_origen))
                    mensaje += f"‚úÖ Assets: {num_assets} archivos listos\n"
                except:
                    mensaje += "‚úÖ Assets: Carpeta encontrada\n"
            else:
                mensaje += "‚ùå Assets: No encontrados\n"
            
            self.lbl_archivos.setText(mensaje)
            self.log("üîç Verificaci√≥n completada para PRODUCCI√ìN")
            
        except Exception as e:
            self.lbl_archivos.setText(f"‚ùå Error: {str(e)}")

    def obtener_tipo_deploy(self):
        """Obtener tipo de deploy seleccionado"""
        texto = self.combo_tipo.currentText()
        mapeo = {
            "üì¶ Git (Autom√°tico)": "git",
            "üîß CLI (Railway)": "cli", 
            "üìã Manual": "manual"
        }
        return mapeo.get(texto, "git")

    def limpiar_log(self):
        self.log_output.clear()
        self.log("üóëÔ∏è Log limpiado")
    
    def log(self, mensaje):
        self.log_output.append(f"{mensaje}")
        self.log_output.moveCursor(self.log_output.textCursor().End)

    def iniciar_deploy(self):
        """Iniciar deploy completo para producci√≥n"""
        if not self.datos_hosting:
            QMessageBox.warning(self, "Configuraci√≥n", "Configure hosting primero")
            return
        
        self.verificar_archivos()
        
        tipo = self.obtener_tipo_deploy()
        comando = self.txt_comando.text().strip()
        
        self.btn_deploy.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        self.log_output.clear()
        self.log("üöÄ INICIANDO DEPLOY PARA PRODUCCI√ìN...")
        self.log("üìù Configurando Gunicorn como servidor WSGI de producci√≥n")
        
        config = {
            'nombre': self.datos_hosting.get('host', 'Servidor'),
            'tipo': tipo,
            'comando': comando,
            'datos_hosting': self.datos_hosting
        }
        
        self.deploy_thread = BackendDeployThread(self.backend_path, config)
        self.deploy_thread.log_signal.connect(self.log)
        self.deploy_thread.progress_signal.connect(self.progress_bar.setValue)
        self.deploy_thread.finished_signal.connect(self.proceso_finalizado)
        self.deploy_thread.start()
    
    def proceso_finalizado(self, exito, mensaje):
        self.btn_deploy.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.log(mensaje)
        
        if exito:
            QMessageBox.information(self, "üéâ ¬°PRODUCCI√ìN CONFIGURADA!", 
                                  f"{mensaje}\n\n"
                                  f"‚úÖ Gunicorn configurado como servidor WSGI\n"
                                  f"‚úÖ Sincronizaci√≥n con GitHub completada\n"
                                  f"‚úÖ Assets copiados al repositorio\n"
                                  f"‚úÖ C√≥digo subido a GitHub\n" 
                                  f"‚úÖ Railway desplegando autom√°ticamente\n"
                                  f"‚úÖ API funcionando en PRODUCCI√ìN")
        else:
            QMessageBox.critical(self, "‚ùå Error", mensaje)

def mostrar_dialogo_backend_deploy(parent=None):
    dialogo = DialogoBackendDeploy(parent)
    dialogo.exec_()

if __name__ == "__main__":
    from PyQt5.QtWidgets import QApplication
    app = QApplication([])
    dialogo = DialogoBackendDeploy()
    dialogo.show()
    app.exec_()